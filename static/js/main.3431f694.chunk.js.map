{"version":3,"sources":["components/Data.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["data","num","imgName","imgSrc","title","label","href","class","btnName","Array","from","Data","sort","a","b","App","className","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mLAEA,IAeeA,EAfF,CACT,CAAIC,IAAI,KAAMC,QAAQ,GAClBC,OAAO,GACPC,MAAM,cACNC,MAAM,qCACNC,KAAK,GACLC,MAAM,cACNC,QAAQ,cCLCC,MAAMC,KAEnBC,EAAKC,MAAK,SAACC,EAAEC,GACT,OAAOD,EAAEZ,IAAMa,EAAEb,QCFV,SAASc,IACpB,OAAO,oCACH,gCACI,yBAAKC,UAAU,QACX,wBAAIA,UAAU,aACV,yBAAKC,IAAI,SAIrB,8BACI,yBAAKD,UAAU,iBACX,yBAAKA,UAAU,QACf,yBAAKA,UAAU,QACf,yBAAKA,UAAU,QACf,yBAAKA,UAAU,QACf,yBAAKA,UAAU,SAGnB,uDCXQE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACV,EAAD,OAEFW,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3431f694.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst data = [\r\n    {   num:\"01\", imgName:\"\", \r\n        imgSrc:\"\",\r\n        title:\"mobiconnect\",\r\n        label:<></>,\r\n        href:\"\",\r\n        class:\"btn-defalut\",\r\n        btnName:\"Read more\" },\r\n\r\n    \r\n\r\n\r\n\r\n\r\n]\r\nexport default data;","import React, {useState,useEffect } from 'react';\r\n\r\nimport Card from './Card';\r\nimport Data from './Data';\r\nconst listData = Array.from(\r\n    // 오름차순\r\n    Data.sort((a,b)=>{\r\n        return a.num - b.num;\r\n    })\r\n)\r\n\r\nexport default function List(){\r\n    return(<>\r\n        {listData.map((con) =>(\r\n            <Card  num={con.num} key={con.num}\r\n                   imgSrc={con.imgSrc}\r\n                   imgName={con.imgName}\r\n                   title={con.title}\r\n                   label={con.label}\r\n                   href={con.href}\r\n                   class={con.class}\r\n                   btnName={con.btnName} />\r\n        ))}\r\n    </>)\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport List from './components/List';\r\n\r\nexport default function App(){\r\n    return(<>\r\n        <header>\r\n            <div className=\"head\">\r\n                <h1 className=\"head-logo\">\r\n                    <img src=\"#\"/>\r\n                </h1>\r\n            </div>\r\n        </header>\r\n        <main>\r\n            <div className=\"bg-border row\">\r\n                <div className=\"col\"></div>\r\n                <div className=\"col\"></div>\r\n                <div className=\"col\"></div>\r\n                <div className=\"col\"></div>\r\n                <div className=\"col\"></div>\r\n            </div>\r\n\r\n            <h2>작업중...</h2>\r\n            {/* <section className=\"visual\">\r\n                <h2 className=\"visual-txt\">\r\n                    <strong className=\"visual-txt-style\">markup<br/>developer</strong>\r\n                    <span className=\"visual-txt-style text\">web<br/>publisher</span>\r\n                </h2>\r\n                <p className=\"visual-title\">portfolio</p>\r\n                <small>career description</small>\r\n            </section>\r\n\r\n            <section className=\"section-list\">\r\n                <h2 className=\"con-tit\">work<br/>experience</h2>\r\n                <div className=\"con-box row\">\r\n                    <List />\r\n                </div>\r\n            </section> */}\r\n        </main>\r\n    </>)\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import 'react-app-polyfill/ie9'; //문법을 변환해주는 라이브러리\n// import 'react-app-polyfill/stable'; //package.json의 browserslist에 해당하는 브라우저에 대해 안정적인 코드를 사용\n\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}